import numpy as np
import scipy.stats
import matplotlib.pyplot as plt
import seaborn as sns
import openpyxl
import pythoncom
import win32com.client
import shutil
import warnings
import os

__path__ = os.path.dirname(__file__).replace('\\', '/').replace('C:/', '/') + '/'

class EuiDiagram:

    """
    The EUI diagram.
    - The diagram will be generated by Matplotlib package and outputted as a png file.
    - The diagram contains the following elements:
        1. The EUI curve.
        2. The EUI min, EUI n, EUI max, EUI g, and EUI labelled on the x-axis.
    """

    def __init__(self):

        """
        Initialize the EUI diagram.
        =========================================================================================

        Arguments:

            None

        Output:

            None
        """

        pass
    
    def plot(self, building, output_path: str):

        """
        Plot the EUI diagram.
        =========================================================================================
        
        Arguments:

		    building (algorithm_bers.building_basic.Building): The building object.

            output_path (str): The path to save the output figure.

        Output:

            None
        """

        # Turn off warnings
        warnings.filterwarnings('ignore')

        # Get kwargs
        est_eui         = getattr(building, 'est_eui', None)
        est_eui_n       = getattr(building, 'est_eui_n', None)
        est_eui_min     = getattr(building, 'est_eui_min', None)
        est_eui_max     = getattr(building, 'est_eui_max', None)
        est_eui_g       = getattr(building, 'est_eui_g', None)
        est_score       = getattr(building, 'est_score', None)
        est_score_level = getattr(building, 'est_score_level', None)

        est_eui_g, est_eui_min, est_eui_n = self._calc_eui_interpolation(est_eui_g, est_eui_min, est_eui_n)

        # Adjust est_eui if it is out of range [est_eui_min, est_eui_max]
        est_eui_plot = min(max(est_eui, est_eui_min), est_eui_max)

        # Generate curve
        eui_curve_x, eui_curve_y = self._calc_eui_curve(est_eui_min, est_eui_max, 100)

        # =========================================================================================
        # 
        # Plot
        # 
        # =========================================================================================

        # Create figure object
        fig, ax = plt.subplots(figsize=(12, 6), dpi=300)

        # Plot and set size
        ax.plot(eui_curve_x, eui_curve_y, 'black', linewidth=2)

        # Add lines
        ax.axvline(est_eui_min, color='b', linestyle='--', linewidth = 3, alpha=0.5)
        ax.axvline(est_eui_n, color='b', linestyle='--', linewidth = 3, alpha=0.5)
        ax.axvline(est_eui_max, color='b', linestyle='--', linewidth = 3, alpha=0.5)
        ax.axvline(est_eui_plot, color='r', linestyle='--', linewidth = 3, alpha=0.5)
        ax.axvline(est_eui_g, color='b', linestyle='--', linewidth = 3, alpha=0.5)
        ax.axhline(0, color='black', linewidth = 5)
        ax.set_xlim([est_eui_min-0.1, est_eui_max+0.1])

        # Get ylim
        ylim = plt.gca().get_ylim()
        ax.set_ylim([ylim[0], ylim[1]*1.5])

        # Add text
        ax.text(est_eui_min, ylim[1]*0.25, 'EUI min\n%.2f'%(est_eui_min), fontsize=16, horizontalalignment='center', weight='bold')
        ax.text(est_eui_n, ylim[1]*0.50, 'EUI n\n%.2f'%(est_eui_n), fontsize=16, horizontalalignment='center', weight='bold')
        ax.text(est_eui_max, ylim[1]*0.25, 'EUI max\n%.2f'%(est_eui_max), fontsize=16, horizontalalignment='center', weight='bold')
        ax.text(est_eui_g, ylim[1]*0.25, 'EUI g\n%.2f'%(est_eui_g), fontsize=16, horizontalalignment='center', weight='bold')
        ax.text(est_eui_plot, ylim[1]*1.2, 'EUI\n%.2f'%(est_eui), fontsize=16, horizontalalignment='center', verticalalignment='top', weight='bold', bbox=dict(facecolor='white', edgecolor='red', alpha = 0.8, pad = 3.0))

        # No grid
        ax.grid(False)

        # Add labels and ticks
        eui_list= [est_eui_g - (est_eui_g - est_eui_min) * ((5-i)/5) for i in range(6)]
        eui_list += [est_eui_g + (est_eui_max - est_eui_g) * ((i*2+1)/5) for i in range(3)]
        ax.set_xticks(eui_list, ['100','90','80','70','60','50','40','20','0'], fontsize=14)
        ax.set_xlabel('Score', fontsize=20)
        ax.set_yticks([])
        ax.set_ylabel('')

        # Add filled color and text
        color = sns.color_palette("rainbow", 8)
        text = ['1+','1','2','3','4','5','6','7']
        [plt.axvspan(eui_list[i],eui_list[i+1],alpha=0.2, color=color[i]) for i in range(8)]
        [plt.text((eui_list[i]+eui_list[i+1])/2, 0.01, text[i], fontsize=16, horizontalalignment='center', color = 'grey') for i in range(8)]

        # Add score and level
        ax.annotate(
            'Score:%.2f\nLevel:%s'%(est_score, est_score_level),
            xy=(est_eui_plot, ylim[1]*1.4),
            xytext=(est_eui_plot, ylim[1]*1.4),
            fontsize=16,
            verticalalignment='top',
            horizontalalignment='center',
            weight='bold',
            arrowprops=dict(facecolor='grey', shrink=0.05),
            bbox=dict(facecolor='white', edgecolor='lightgrey', alpha = 0.8, pad = 3.0)
        )

        # Save figure
        plt.savefig(output_path + 'eui_diagram.png', dpi=300, bbox_inches='tight')

        return

    def _calc_eui_interpolation(self, eui_g, eui_min, eui_n) -> (float, float):

        """
        Calculate the EUI interpolation.
        If only the eui_min is provided (in estimation system BERSe), the eui_n will be calculated.
        If only the eui_n is provided (in estimation system R-BERS), the eui_min will be calculated.
        =========================================================================================

        Arguments:

            eui_g (float): The green building criteria estimated simulated EUI of a building.

            eui_min (float): The minimum EUI in the interpolation.

            eui_n (float): The EUI at the neutral point in the interpolation.

        Output:

            eui_g (float): The green building criteria estimated simulated EUI of a building.

            eui_min (float): The minimum EUI in the interpolation.

            eui_n (float): The EUI at the neutral point in the interpolation.
        """

        if (eui_min is not None) and (eui_n is None):

            eui_n   = eui_min + (eui_g - eui_min) * 0.2

        elif (eui_min is None) and (eui_n is not None):

            eui_min = eui_n - (eui_g - eui_n) * 0.25
        
        else:

            raise ValueError('Only one of eui_min and eui_n should be provided.')
        
        return eui_g, eui_min, eui_n

    def _calc_eui_curve(self, x_min: float, x_max: float, n_x: int) -> (np.ndarray, np.ndarray):

        """
        Calculate the EUI curve.
        =========================================================================================

        Arguments:

            x_min (float): The minimum EUI in the interpolation.

            x_max (float): The maximum EUI in the interpolation.

            n_x (int): The number of points in the interpolation.

        Output:

            x (np.ndarray): The x of EUI curve.

            y (np.ndarray): The y of EUI curve.
        """

        # Parameters of the skew normal distribution
        a = 3
        loc = 2
        scale = 1
        
        # Generate curve
        x_ske = np.linspace(
            scipy.stats.skewnorm.ppf(0.01, a, loc=loc, scale=scale),
            scipy.stats.skewnorm.ppf(0.99, a, loc=loc, scale=scale),
            n_x,
        )

        y = scipy.stats.skewnorm.pdf(x_ske, a, loc=loc, scale=scale)
        x = np.linspace(x_min, x_max, n_x)

        return x, y

class EnergyRatingDashboard:

    """
    The energy rating dashboard class.
    - The dashboard is used to visualize the energy rating of a building.
    - The dashboard will be outputted as a excel file.
    """

    def __init__(self):

        """
        Initialize the Energy Rating Dashboard class.
        =========================================================================================

        Arguments:

            None.

        Output:

            None.
        """

        pass

    def output_file(self, building, output_path: str, **kwargs) -> None:

        # Set output file path
        output_file = output_path + 'energy_rating_dashboard.xlsx'
        
        if (building.estimation_system == 'BERSe'):

            # Set source file path
            source_file = __path__ + 'output_template/template_energy_rating_dashboard_BERSe.xlsx'

            # Copy xlsx template to output path
            shutil.copy(source_file, output_file)

            # =========================================================================================
            #
            # Read xlsx file
            #
            # =========================================================================================

            # Open workbook
            wb_output = openpyxl.load_workbook(output_file)

            # Open worksheet
            ws_output = wb_output['Sheet1']

            # =========================================================================================
            #
            # Set cell values as the building attributes
            #
            # =========================================================================================

            # =========================================================================================
            # Building basic information
            # Set building name
            ws_output['F2'] = building.building_name

            # Set building address
            ws_output['F3'] = building.building_address_county + building.building_address_town

            # Set total area of energy sections
            ws_output['F4'] = building.est_a_es_comm

            # Set total area of exclusive energy sections
            ws_output['F5'] = building.est_a_es_exclusive

            # Set estimation id
            ws_output['F6'] = output_path.split('/')[-2]

            # =========================================================================================
            # Building energy rating
            # Set energy rating score level
            ws_output['Q2'] = building.est_score_level

            # Set energy rating scale
            ws_output['E10'] = round(building.est_eui_g - (40/50) * (building.est_eui_g - building.est_eui_min), 2)
            ws_output['E13'] = round(building.est_eui_g - (30/50) * (building.est_eui_g - building.est_eui_min), 2)
            ws_output['E16'] = round(building.est_eui_g - (20/50) * (building.est_eui_g - building.est_eui_min), 2)
            ws_output['E19'] = round(building.est_eui_g - (10/50) * (building.est_eui_g - building.est_eui_min), 2)
            ws_output['E22'] = round(building.est_eui_g, 2)
            ws_output['E25'] = round(building.est_eui_g + (10/50) * (building.est_eui_max - building.est_eui_g), 2)
            ws_output['E28'] = round(building.est_eui_g + (30/50) * (building.est_eui_max - building.est_eui_g), 2)
            ws_output['E31'] = round(building.est_eui_g + (30/50) * (building.est_eui_max - building.est_eui_g), 2)

            # Set est_eui
            ws_output['Q9'] = '{}\nkWh/(m2*yr)\n\n{}\nkgCO2/(m2*yr)'.format(round(building.est_eui, 2), round(building.est_cei, 2))

            # Set est_eui_total
            ws_output['Q33'] = round(building.est_eui_total, 2)

            # Set est_eui_main
            ws_output['Q34'] = round(building.est_eui_main, 2)

            # Set est_eui
            ws_output['Q35'] = round(building.est_eui, 2)

            # Set est_cei
            ws_output['Q36'] = round(building.est_cei, 2)

            # =========================================================================================
            #
            # Save xlsx file
            #
            # =========================================================================================

            # Save workbook
            wb_output.save(output_file)

        elif (building.estimation_system == 'R-BERS'):

            pass